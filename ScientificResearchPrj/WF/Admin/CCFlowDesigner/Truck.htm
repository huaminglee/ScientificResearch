<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
   <style type="text/css">
        #holder
        {
            width: 1000px;
            height: 600px;
            margin: auto;
            border: 1px dashed #c0c0c0;
        }
    </style>
   <script src="../../Scripts/Raphael/raphael.js" type="text/javascript"></script>
   <script src="../../Scripts/easyUI/jquery-1.8.0.min.js" type="text/javascript"></script>
    <script src="../../Scripts/QueryString.js" type="text/javascript"></script>
   <script type="text/javascript">

        var jdata;
        var rFlow;
        //定义样式变量，可在此统一修改流程样式

        var STYLE_FONT_SIZE_NODE = 14;
        var STYLE_FONT_SIZE_LABEL = 12;

        var nodeIconPath = '../../../ClientBin/NodeIcon/';
        var nodeIconDefault = 'Default.jpg';
     
        var STYLE_NODE_WIDTH = 50;
        var STYLE_NODE_HEIGHT = 50;
        var STYLE_NODE_COLOR_FORE = 'none';
        var STYLE_NODE_COLOR_FORE_HOVER = 'blue';
        var STYLE_NODE_DEFAULT_ICON_PATH = '../../../ClientBin/NodeIcon/';
        var STYLE_NODE_DEFAULT_ICON = 'Default.jpg';
        var STYLE_NODE_BORDER_RADIUS = 5;
        var STYLE_NODE_BORDER_COLOR_FIRST = 'green';
        var STYLE_NODE_BORDER_COLOR_END = 'red';
        var STYLE_NODE_BORDER_COLOR = 'black';
        var STYLE_NODE_BORDER_COLOR_HOVER = 'blue';
        var STYLE_NODE_BORDER_WIDTH_NORMAL = 1;
        var STYLE_NODE_BORDER_WIDTH_HOVER = 2;
       
        var STYLE_LABEL_COLOR_FORE = 'none';

        var STYLE_LINE_COLOR = 'green';
        var STYLE_LINE_COLOR_HOVER = 'blue';
        var STYLE_LINE_WIDTH = 2;

        var fk_Flow;
        var work_ID
        $(function () {
            fk_Flow = getQueryStringByName("FK_Flow");
            if (fk_Flow == null) fk_Flow = '001';
           
            work_ID = getQueryStringByName("WorkID");
            if (work_ID == null) fk_Flow = '001';
            var data = "{fk_flow:'" + fk_Flow + "',workid:'" + work_ID + "'}";

            $.ajax({
                type: "Post",
                contentType: "application/json;utf-8",
                url: "../XAP/WebService.asmx/GetFlowTrackJsonData",
                dataType: "json",
                data: data,
                success: function (re) {
                    jdata = $.parseJSON(re.d);
                    if (!jdata.success) {
                        alert(jdata.msg);
                    }
                    else {
                        drawStart(jdata.datas);
                    }
                },
                error: function (re) {
                    alert(re.responseText);
                }
            });
        });

        function drawStart(datas) {
            /// <summary>加载时绘制流程图/轨迹</summary>
            /// <param name="datas" Type="Object">绘制的数据，包含flow/nodes/labels/dirs/tracks，均为Array</param>

            var r = Raphael('holder', 1000, 600);
            var rNode, rDir, rBorder, rImage, rText, rLabel, rPath;

            rFlow = new RFlow(fk_Flow);

            //绘制节点
            var nodeBorderColor = STYLE_NODE_BORDER_COLOR;
            var startNodePosType = 0;
            var endNodePosType = getMaxInArray(datas.nodes, 'NodePosType');
            $.each(datas.nodes, function () {
               
                //确定边框颜色
                switch (this.NodePosType) {
                    case startNodePosType:
                        nodeBorderColor = STYLE_NODE_BORDER_COLOR_FIRST;
                        break;
                    case endNodePosType:
                        nodeBorderColor = STYLE_NODE_BORDER_COLOR_END;
                        break;
                    default:
                        nodeBorderColor = STYLE_NODE_BORDER_COLOR;
                        break;
                }

                //确定节点图标
                if (this.Icon == null || this.Icon.length == 0) {
                    this.Icon = STYLE_NODE_DEFAULT_ICON;
                }else {
                    if (this.Icon.indexOf('.') == -1) {
                        this.Icon += '.png';
                    }else {
                        this.Icon = this.Icon.substr(this.Icon.lastIndexOf('/') + 1);
                    }
                }

                //开始绘制，并把绘制后的对象存储起来以便下次使用【在流程设计中会使用到】
                rNode = new RNode(this.NodeID, this.Name, this.X - STYLE_NODE_WIDTH / 2, this.Y - STYLE_NODE_HEIGHT / 2);
              
                // CENTER POINT TO ADD NEW DIRECTION ARROWLINE

                // BORDER
                rNode.rBorder = r.rect(rNode.x, rNode.y, STYLE_NODE_WIDTH, STYLE_NODE_HEIGHT, STYLE_NODE_BORDER_RADIUS);
                rNode.rBorderColor = nodeBorderColor;
                rNode.rBorder.attr({ "stroke": nodeBorderColor, "stroke-width": STYLE_NODE_BORDER_WIDTH_NORMAL });
               
               // TEXT
                rNode.rText = r.text(rNode.x + STYLE_NODE_WIDTH / 2, rNode.y + STYLE_NODE_HEIGHT + 10, this.Name);
                rNode.rText.attr({ "stroke": STYLE_NODE_COLOR_FORE, "font-size": STYLE_FONT_SIZE_NODE });
                //ADD TEXT EDITOR

                // ICON OR FIGURE
                rNode.rIcon = r.image(STYLE_NODE_DEFAULT_ICON_PATH + this.Icon, rNode.x + 1, rNode.y + 1, STYLE_NODE_WIDTH, STYLE_NODE_HEIGHT);
                rNode.rIcon.attr("title", this.Name);
                rNode.rIcon.hover(
                    function () {// HOVER
                        var node = rFlow.getNodeByRIconId(this.id);
                        if (node != null) {
                            node.rBorder.attr({ "stroke": STYLE_NODE_BORDER_COLOR_HOVER, "stroke-width": STYLE_NODE_BORDER_WIDTH_HOVER });
                            node.rText.attr({ "stroke": STYLE_NODE_COLOR_FORE_HOVER });
                        }
                    }
                    ,function () { // NORMAL
                        var node = rFlow.getNodeByRIconId(this.id);
                        if (node != null) {
                            node.rBorder.attr({ "stroke": node.rBorderColor, "stroke-width": STYLE_NODE_BORDER_WIDTH_NORMAL });
                            node.rText.attr({ "stroke": STYLE_NODE_COLOR_FORE });
                        }
                    }
                );

                rFlow.nodes.push(rNode);
            });

            //绘制节点的连线
            var fromNode, toNode;
            $.each(datas.dirs, function () {
                rDir = new RDirection(this.Node, this.ToNode, this.DirType, this.IsCanBack);
                rDir.FromNode = rFlow.getNode(this.Node);
                rDir.ToNode = rFlow.getNode(this.ToNode);

                //计算连线的起始点
                rDir.rPath = r.drawArr({ obj1: rDir.FromNode.rBorder, obj2: rDir.ToNode.rBorder });
                rFlow.dirs.push(rDir);
            });

            //绘制标签
            $.each(datas.labels, function () {
                rLabel = new RLabel(this.MyPK, this.Name, this.X, this.Y);
                rLabel.rText = r.text(this.X, this.Y, this.Name);
                rLabel.rText.attr({ "stroke": STYLE_LABEL_COLOR_FORE, "font-size": STYLE_FONT_SIZE_LABEL, "text-anchor": "start" });
            });
        }

        function RFlow(sFlowNo) {
            this.no = sFlowNo;
            this.nodes = new Array();
            this.labels = new Array();
            this.dirs = new Array();

            if (typeof RFlow._initialized == "undefined") {
                RFlow.prototype.getNode = function (nodeid) {
                    for (i in this.nodes) {
                        if (this.nodes[i].id == nodeid) {
                            return this.nodes[i];
                        }
                    }

                    return null;
                }

                RFlow.prototype.getNodeByRIconId = function (raphaelid) {
                    for (i in this.nodes) {
                        if (this.nodes[i].rIcon.id == raphaelid) {
                            return this.nodes[i];
                        }
                    }

                    return null;
                }
            }
        }

        function RNode(iNodeID, sNodeName, iX, iY) {
            this.id = iNodeID;
            this.name = sNodeName;
            this.x = iX;
            this.y = iY;
            this.icon = '';
            this.nodePosType = 0;
            this.hisToNDs = '';
            this.rBorder = null;
            this.rIcon = null;
            this.rText = null;
            this.rBorderColor = 'black';
        }

        function RLabel(sPk, sLabelName, iX, iY) {
            this.mypk = sPk;
            this.name = sLabelName;
            this.x = iX;
            this.y = iY;
            this.rText = null;
        }

        function RDirection(iFromNodeID, iToNodeID, iDirType, iIsCanBack) {
            this.fromNodeID = iFromNodeID;
            this.toNodeID = iToNodeID;
            this.dirType = iDirType;
            this.isCanBack = iIsCanBack;
            this.rPath = null;
            this.rPathColor = STYLE_LINE_COLOR;
            this.FromNode = null;
            this.ToNode = null;
            this.LinkText = null;
        }

        function getMaxInArray(arr, propName) {
            /// <summary>获取指定对象数组中指定属性的最大值</summary>
            /// <param name="arr" Type="Array">对象数组</param>
            /// <param name="propName" Type="String">属性名称</param>
            var max = 0;

            $.each(arr, function () {
                for (prop in this) {
                    if (prop == propName && !isNaN(this[prop])) {
                        max = Math.max(max, this[prop]);
                    }
                }
            });

            return max;
        }

        //获取组成箭头的三条线段的路径
        function getArr(x1, y1, x2, y2, size) {
            var angle = Raphael.angle(x1, y1, x2, y2); //得到两点之间的角度
            var a45 = Raphael.rad(angle - 45); //角度转换成弧度
            var a45m = Raphael.rad(angle + 45);
            var x2a = x2 + Math.cos(a45) * size;
            var y2a = y2 + Math.sin(a45) * size;
            var x2b = x2 + Math.cos(a45m) * size;
            var y2b = y2 + Math.sin(a45m) * size;
            var result = ["M", x1, y1, "L", x2, y2, "L", x2a, y2a, "M", x2, y2, "L", x2b, y2b];
            return result;
        }

        function getStartEnd(obj1, obj2) {
            var bb1 = obj1.getBBox(),
                bb2 = obj2.getBBox();
            var p = [
                    { x: bb1.x + bb1.width / 2, y: bb1.y - 1 },
                    { x: bb1.x + bb1.width / 2, y: bb1.y + bb1.height + 1 },
                    { x: bb1.x - 1, y: bb1.y + bb1.height / 2 },
                    { x: bb1.x + bb1.width + 1, y: bb1.y + bb1.height / 2 },
                    { x: bb2.x + bb2.width / 2, y: bb2.y - 1 },
                    { x: bb2.x + bb2.width / 2, y: bb2.y + bb2.height + 1 },
                    { x: bb2.x - 1, y: bb2.y + bb2.height / 2 },
                    { x: bb2.x + bb2.width + 1, y: bb2.y + bb2.height / 2 }
                ];
            var d = {}, dis = [];
            for (var i = 0; i < 4; i++) {
                for (var j = 4; j < 8; j++) {
                    var dx = Math.abs(p[i].x - p[j].x),
                        dy = Math.abs(p[i].y - p[j].y);
                    if (
                         (i == j - 4) ||
                         (((i != 3 && j != 6) || p[i].x < p[j].x) &&
                         ((i != 2 && j != 7) || p[i].x > p[j].x) &&
                         ((i != 0 && j != 5) || p[i].y > p[j].y) &&
                         ((i != 1 && j != 4) || p[i].y < p[j].y))
                       ) {
                        dis.push(dx + dy);
                        d[dis[dis.length - 1]] = [i, j];
                    }
                }
            }
            if (dis.length == 0) {
                var res = [0, 4];
            } else {
                res = d[Math.min.apply(Math, dis)];
            }
            var result = {};
            result.start = {};
            result.end = {};
            result.start.x = p[res[0]].x;
            result.start.y = p[res[0]].y;
            result.end.x = p[res[1]].x;
            result.end.y = p[res[1]].y;
            return result;
        }

        //随着节点位置的改变动态改变箭头
        Raphael.fn.drawArr = function (obj) {
            var point = getStartEnd(obj.obj1, obj.obj2);
            var path1 = getArr(point.start.x, point.start.y, point.end.x, point.end.y, 8);

            if (obj.arrPath) {
                obj.arrPath.attr({ path: path1 });
            }
            else {
                obj.arrPath = this.path(path1);
                obj.arrPath.attr({ "stroke": STYLE_LINE_COLOR, "stroke-width": STYLE_LINE_WIDTH });

                obj.arrPath.hover(function () {
                    this.attr("stroke", STYLE_LINE_COLOR_HOVER);
                }, function () {
                    this.attr("stroke", STYLE_LINE_COLOR);
                });
            }

            return obj;
        };
    </script>
</head>
 <div id="holder"></div>
</html>
